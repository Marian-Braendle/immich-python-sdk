on:
  workflow_call:
    inputs:
      immich-version:
        description: 'Immich version'
        type: string
        required: true
      immich-api-url:
        description: 'URL to immich openapi specification'
        type: string
        required: true
      generator-lib:
        description: 'Python library to be used for generator'
        type: string
        required: true
      branch-name:
        description: 'Branch name'
        type: string
        required: true
      project-name:
        description: 'Python project name'
        type: string
        required: true
      package-name:
        description: 'Python package name'
        type: string
        required: true
    secrets:
      token:
        required: true


jobs:
  check-branch:
    runs-on: ubuntu-latest
    outputs:
      branch_exists: ${{ steps.check.outputs.branch_exists }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if branch exists
        id: check
        run: |
          if git ls-remote --exit-code --heads origin refs/heads/${{ inputs.branch-name }} 2>&1>/dev/null; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

  generate:
    needs: check-branch
    if: needs.check-branch.outputs.branch_exists != 'true'
    name: Generate SDK (if branch not already exists)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.token }}

    - name: Create branch
      run: git checkout --orphan ${{ inputs.branch-name }}

    - name: Generate Python SDK
      uses: openapi-generators/openapitools-generator-action@v1
      with:
        generator: python
        openapi-url: ${{ inputs.immich-api-url }}
        template-dir: templates
        command-args: "--additional-properties=\
          projectName=${{ inputs.project-name }},\
          packageName=${{ inputs.package-name }},\
          packageVersion=${{ inputs.immich-version }},\
          packageUrl=${{ github.server_url }}/${{ github.repository }}/tree/${{ inputs.branch-name }},\
          library=${{ inputs.generator-lib }},\
          gitHost=${{ github.server_url	 }},\
          gitUserId=${{ github.repository_owner	 }},\
          gitRepoId=${GITHUB_REPOSITORY#*/},\
          licenceInfo=MIT,\
          poetry1=true"

    - name: Move generated files
      run: find . -mindepth 1 -maxdepth 1 ! -name ".git" ! -name "python-client" -exec rm -rf {} + && mv python-client/{*,.*} . && rmdir python-client

    - name: Create commit
      run: |
        git config user.email "action@github.com"
        git config user.name "Github Action"
        git add -A
        git commit -m "Generated immich SDK for ${{ inputs.branch-name }}"

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Build SDK
      run: poetry build

    - name: Upload distributions
      uses: actions/upload-artifact@v4
      with:
        name: release-dists-${{ inputs.branch-name }}
        path: dist/

    - name: Push branch
      run: git push -u origin ${{ inputs.branch-name }}

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: generate
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/immich-python-sdk
    permissions:
      id-token: write

    steps:
    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: release-dists-${{ inputs.branch-name }}
        path: dist/
    - name: Publish distribution to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/